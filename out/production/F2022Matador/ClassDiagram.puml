@startuml
'interface IField
'abstract class Field
'abstract class Property
'interface IO
'class UI
'class FileReader
'class DBConnector
class Main

Main *-- "*" Game
Main : static main(String[] args)
'Main : ArrayList<Game> games
'Game *-- "1" FileIO
Game  *-- "2...6" Player : has-a
'Game  *-- "1" TextUI : has-a
/'Game *-- "1" Board : has-a'/
Player *-- BankAccount : has-a
'IField <|-- Field : is-a
'Field <|-- Consequence : is-a
'Field <|-- Property : is-a

/'Board *-- IField : has-a
Consequence <|-- Tax : is-a
Consequence <|-- Start : is-a
Property <|-- Plot : is-a
Property <|-- Business : is-a
Property <|-- Business : is-a
IO <|-- FileReader: implements
IO <|-- DBConnector: implements'/


'Game :  TextUI textUI
'Game :  FileIO fileIO
'Game :  Board board
Game :  ArrayList<Player> players
'Game :  Player currentPlayer
'Game :  final int MAX


Game :  boolean hasGameData()
Game :  void runLoop()
Game :  void takeTurn()
Game :  void printAccounts()
Game :  void saveGamedata()

'Board : ArrayList<Field> fields
'Board : Dice dice

BankAccount : BankAccount(int balance)
BankAccount : int balance
BankAccount : void doTransaction(int amount)
BankAccount : int getBalance()



'TextUI : String getUserInput(String msg)

/'Field : - String label
Field : - int id
Field : - int cost
Field : - int income
IField : + String onLand()
IField : + void processResponse()
IField : + String toString()

Property : int seriesID
Property : String onLand()
Property : onAccept()
Property : onReject()
Property : + String toString()


Consequence : onAccept()
Consequence : onReject()
Consequence : + String toString()'/

Player : BankAccount account
Player : String name
Player : Player(String name, int balance)
'â‚¬Player : void receiveMoney(int amount)
'Player : void payMoney(int amount)
'Player : void updatePosition()
Player : String toString()
Player : int getBalance()
Player : String getName()

FileIO : ArrayList <String> readGameData()
FileIO : String[] readFieldData()
FileIO : void saveGamedata()
@enduml



